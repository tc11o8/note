long和double变量是64位的，他们的操作不是原子性的，而是分为两个32位的操作。除非用锁或者用volatile类型。
volatile只保证线程间通讯，不加锁。
不可变对象永远是线程安全的。再加上volatile保证通信就可以了。
除了常用的同步容器外CopyOnWriteArrayList也可以安全的用于多线程中。
最简单和安全的方式发布一个静态创建的对象，是使用静态初始化器。jvm内在的机制会保证它的同步。
public static Holder holder = new Holder();
java5.0添加了两个新的容器类型queue和blockingqueue。

queue用来临时保存正在等待被进一步处理的一系列元素，操作不会阻塞。jdk提供了几种实现。concurrentlinkedqueue一个传统的fifo队列。priorityqueue一个非并发具有优先级顺序的队列。linkedlist实现了queue。但是纯queue效率更高。

blockingqueue增加了可阻塞的插入和获取操作，如果队列是空的，一个获取操作会一直阻塞直到有可用的元素。如果一个队列是满的，一个插入操作会一直阻塞，直到存在可用的空间。
map附加的原子操作，比如，缺少即加入，相等便删除，相等便替换。

deque和blockingdeque，是一个双向队列，允许高效的在头和尾分别进行插入和移除。实现是arraydeque和linkedblockingdeque。
双向队列时他们可以进行一种窃取工作模式。当自己的任务都完成以后从别人的队列末端，窃取一个继续进行，任务。
调用interrupt时，像是sleep这种等待的方法会抛出interruptedexception。你可以直接把这个异常继续往上层抛，也可以捕获这个异常，然后再调用interrupt。
但是不可以捕获了异常，然后不作任何响应。这样会剥夺上层的代码处理中断的机会。

闭锁

futuretask同样可以作为闭锁。在get时，会等待在那里，直到任务完成。
java中有一些原子操作类atomiclong等。是线程安全的。
volatile变量：当写入操作不依赖变量当前值，或只有一个线程更新变量时，适用。
线程封闭：仅在单线程内访问数据。最简单实现线程安全的方式之一。
jdbc并不要求connection对象线程安全，通过线程池来达到线程封闭。
threadlocal类似于全局变量。可视为map<Thread,T>针对一个线程持有一个对象。

第五章、容器

使用迭代时，修改容器会造成ConcurrentModificationException异常，使用iterator.remove可以避免。原理是多线程的及时失败策略。
concurrenthashmap使用了分段锁来提高性能。它提供的迭代器具有弱一致性，而非及时失败。它的size、isempty返回一个估算值以提高效率。
copyonwritearraylist在写入时复制。返回的迭代器与创建时完全一样，无视修改操作。
blockingqueque简化了生产者消费者模式的实现。一个io密集一个cpu密集，如果不解耦，将把并行度降到两者中更低的那个。它的具体实现有linkedblockingqueue，arrayblockingqueue，类似linkedlist和arrayllist的fifo(先进先出)队列。priorityblockingqueue是一种按优先级的队列。
synchronousqueue是一种没有盘架子的洗盘器---直接把任务交给线程，而没有中间缓存。有足够多的消费者时，才适用这种模式。
deque是双端队列，适用于工作密取模式。（work stealing）每个消费者都有自己的双端队列。消费者完成自己的工作时，再从别的消费者的双端队列的尾端获取工作。极大减小竞争。
countdowlatch是一种灵活的闭锁实现。
semaphore管理一组许可，如果没有许可，acquire将阻塞直到有许可。二值信号量（初始为1）可用作互斥体。
栅栏barrier用于等待其他线程。
cyclicbarrier可以使一定数量的参与者反复汇集。exchanger是一种两方栅栏，用于交换数据。

第六章，任务执行
newfixedthreadpool创建固定长度的线程池。
newcachedthreadpool创建可缓存的线程池。
newsinglethreadexecutor单线程
newscheduledthreadpool类似于timer的功能。
executor的子接口executorservice解决线程的生命周期问题。shutdown不再接受新任务，再会执行完已经接受甚至还未开始的任务。shutdownnow会直接取消在运行中的任务。
关闭后会在execute时抛出rejectedexecutionexcepion，可以调用awaittermination来等待终止。
使用scheduledthreadpoolexec来代替timer。因为一，某任务执行时间长时，会让其他任务不准时或干脆丢失。二，出现异常时，会错误地认为整个timer被取消了。三，timer只有一个线程。
使用delayqueue来构建自己的调度任务。
callable比runnable多出返回值。
future表示任务周期executorservice的submit方法将返回一个future。
completionservice将executor和blockingqueue的功能融合在了一起。它会将所有完成的结果放入一个blockingqueue中，使用者通过take函数取得结果。
多个executorcompletionservice可以共享一个executor。可以用来统计任务状态。
future在get函数可以为任务设定时限。invokeall可以为一组future完成限时。

第七章，取消与关闭
调用interrupt是取消线程最合理的方式。它不会直接中断线程，而是让interrupted返回true。阻塞库方法，如thread的sleep，object的wait，join（等待直到线程停止）都会检查这个状态，如果中断就提前返回。
调用interrupt返回true时，必须抛出interruptexception或再次调用interrupt来恢复中断。
while(!Thread.currentThread().isInterrupted)
dosomething();
当取消某个任务又不宜直接中断线程池时，可以通过future的cancel方法。并且调用时如果任务已经结束就不会造成任何影响。
通过重写newtaskfor可以重新定义future的cancel的行为。用来让非线程阻塞，如io阻塞，可以中止。
毒丸模式（当得到这个对象时，停止），只能用于先进先出fifo。
多个生产者和消费者时，将变得很难用。只有在无界队列，毒丸才能可靠的工作。
如果要在任务发生异常时，特别处理，需要改写runnable，或threadpoolexecutor的afterexecute方法。execute提交的任务交给异常处理器。submit提高的任务被future的get封装在executionexception中重新抛出。
正常关闭会触发关闭钩子。强行关闭jvm时，不会运行关闭钩子。运行关闭钩子时，其他线程也正常运行。
尽可能少使用守护进程，因为它不进行清理。

第八章，线程池的使用。
如果线程池中的任务互相依赖，而线程池又不是足够大时，会引发饥饿死锁。无界的线程池不会引发此问题。（如newcachedthreadpool，这个池也是最好的默认选择，效率高！）
阻塞方法分限时和不限时。
计算密集的任务，线程池大小为cpu数量+1最合适。
setrejectedexecutionhander可以调整饱和策略。
threadpoolexecutor可以通过afterexecute，beforeexecute，terminated来扩展。

第十章，避免活跃性危险
抱死是最简单的死锁形式：a等b的锁，b等a的锁。
如果以固定顺序获得锁，不会发生锁顺序死锁问题。
动态锁顺序死锁，使用hashcode来固定锁的顺序。
调用方法时不需要持有锁，叫开放调用。此时不会发生死锁。
将代码改成开放调用，会使一些操作不再原子。

第十一章，性能与可伸缩性
锁分解和锁分段。前者代表把一个锁分成两个。后者代表分成很多个。concurrenthashmap使用一个包含了16个锁的数组。
锁分段如果请求多个变量时，可以将一些反复计算的结果缓存起来，这叫热点域，比如hashmap中的size。
unix中的vmstat和mpstat可以检查cpu的忙碌状态。没充分利用时需要找原因。
现有的jvm内存调配效率极高，不要使用对象池。

第十三章，显示锁
Lock lock = new ReentrantLock();
lock.lock();
try{
} finally{
   lock.unlock();
}
如果没有使用finally来释放锁，将很难追踪到错误。
trylock提供了另一种防止死锁的办法，定时锁和轮询锁。前者可以定时失败，后者可以解决非顺序加锁的问题。
可中断锁。在加锁同时保持对中断的响应。
非公平锁比公平锁性能更高。当持有锁的时间较长或请求锁的时间间隔较长时，比较适合公平锁。内置锁和显式锁都默认使用非公平锁。
尽量使用内置锁，由于是jvm内置属性，未来优化空间更大。在需要定时轮询可中断，公平锁及非块结构锁时才使用显式锁。
读写锁。一个资源可以同时被多个读操作或一个写操作访问。对需要频繁读取时，读写锁效率更高，其他情况下独占锁性能更高。

第十四章自定义同步工具
可以用轮询与休眠实现简单的阻塞。但要选合适的休眠时间，休眠越短，响应性越高，cpu消耗越大。
使用notifyall和wait效率更高。wait会释放锁，意思是我要去休息了，有事叫我。锁对象和wait对象必须是一个。
wait有可能在没有调用notify时返回。所以必须用
synchronized(lock){
 while(condition)
   lock.wait();
}
使用notify可能导致信号丢失。所以必须满足以下两个条件：1，所有等待线程的类型相同。2，单进单出。
单次通知（notify）和条件通知都属于优化措施。后者通过增加条件来减少通知次数。
通过lock的newcondition可以返回多个condition来管理不同的notify。注意，要使用condition的await和signal而不是wait和notify。
基于aqs构建的类：ReentrantLock,Semaphore,CountDownLatch,ReentrantReadWriteLock,SynchronoousQueue,FutureTask

第十五章，原子变量与非阻塞同步机制
CAS：比较并交换。可以不用锁一样完成读改写的操作。java的原子对象都支持。
可以使用floattointbits来处理浮点数的原子操作。
在高度竞争下锁性能高过CAS，中等竞争（大多情况）时，CAS性能更高。类似于红绿灯。使用threadlocal的效率可以高过前两者：没有竞争才能实现真正的可伸缩。
CAS不存在死锁问题，但可能会发生活锁。
可以声明一个volatile类型的引用，再用atomicreferencefieldupdater基于反射来做CAS。有点烦，完全为了提升性能。
ABA问题：某些算法，值先从A变成B，再变回A时，需要有不同的处理。此时可以通过加版本号的方式来解决。

第十六章java内存模型
编译器会造成重排序，在多线程情况下不同步，运行顺序得不到保证。volatile保证写操作在读操作之前进行。
双重检查加锁会造成线程看到一个部分构造的对象。使用延迟初始化占位模式更好。
final域会在构造函数完成后被冻结，故没有重排序问题。多线程可以放心读取。非final则需要靠同步来确保可见性。