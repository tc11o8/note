Class.isAssignableFrom()是用来判断一个类Class1和另一个类Class2是否相同或是另一个类的子类或接口
instanceof是用来判断一个对象实例是否是一个类或接口的或其子类子接口的实例

第14章类型信息
RTTI,run time type identification,构造器是隐式的静态的，static块语句在类第一次被加载时执行。
Class.forName()，需要加载指定类，会抛出未找到异常。
Class的newInstance()方法是实现虚拟构造器的途径，我不知道你的类型，但要正确的创建你，注意必须带有默认构造器。
类字面常量，FoncyToy.class，更简单，安全，在编译期就会被检查，比forName()更高效。不会自动初始化该Class对象。
为了使用类而做的准备工作分三部分：
1,加载，由类加载器执行，将查找字节码，通常classpath指定路径查找，并从这些字节码中创建一个class对象。
2,链接，验证类中的字节码，为静态域分配存储空间，并且如果必须的话，将解析这个类创建的对其他类的引用。
3,初始化，如果该类有超类，则对其初始化，执行静态初始化器和静态初始化块。
static final如果赋值为常量，不触发类初始化，是编译期常量，如果static final赋值不是编译时常量，将进行类的初始化。
如果static域不是final，总是要求先进行链接和初始化，然后读取值。
向Class引用添加泛型语法为了提供编译期类型检查，而Class要到运行时才发现错误。Class<? extends Number>
instanceof,isInstance()保持了类型的概念，你是这个类吗，或者你是这个类的派生类吗？如用==比较实际的Class对象，没有考虑继承，它是或不是这个确切类型。
java动态代理，比代理的思想更向前一步，它可以动态的创建代理，并动态的处理对所代理方法的调用。
Proxy.newProxyInstance(),一个类加载器，代理接口，以及InvocationHander接口的实现。
接口并非是对解耦的一种无懈可击的保障，使用反射，仍旧可以到达并调用所有方法，甚至是private方法。