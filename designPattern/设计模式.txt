策略模式：定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。
使用组合，setM()。

观察者模式：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。
注册或取消一组观察者，使用组合。

装饰者模式：动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。
扩展对象的另一种实现。

工厂方法模式：定义了一个创建对象的接口，但由子类决定要实例化的是哪一个。工厂方法让类把实例化推迟到子类。
工厂方法允许类将实例化延迟到子类进行。

抽象工厂模式：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。
抽象工厂创建相关的对象家族，而不需要依赖它们的具体类。

单例模式：确保一个类只有一个实例，并提供一个全局访问点。
单例模式，三种方式

命令模式：将“请求”封装成对象，以便使用不用的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。
命令模式将发出请求的对象和执行请求的对象解耦。

适配器模式：将一个类的接口，转换成客户期望的另一个接口，适配器让原本接口不兼容的类可以合作无间。
外观模式：提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。
外观模式不只是简化了接口，也将客户从组件的子系统中解耦。
外观和适配器可以包装许多类，但是外观的意图是简化接口，而适配器的意图是将接口转换成不同接口。

模版方法模式：在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模版方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。
模版方法定义了一个算法的步骤，并允许子类为一个或多个步骤提供实现。

迭代器模式：提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。

组合模式：允许你将对象组合成树形结构来表现“整体/部分”层次结构。组合能让客户以一致的方式处理个别对象以及对象组合。
组合模式让我们能用树形方式创建对象的结构，树里面包含了组合以及个别的对象。
使用组合结构，我们能把相同的操作应用在组合和单独的对象上。换句话说，在大多数情况下，我们可以忽略对象组合和单独对象之间的差别。

责任链模式，解耦请求发送者和请求处理者


设计原则
1封装变化。
2多用组合少用继承。
3针对接口编程，不针对实现编程。
4为交互对象之间的松耦合设计而努力。
5类应该对扩展开放，对修改关闭。
6依赖抽象，不要依赖具体类。
7只和朋友交谈。
8别找我，我会找你。
9类应该只有一个改变的理由